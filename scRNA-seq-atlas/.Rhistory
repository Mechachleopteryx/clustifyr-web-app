gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_size = 3,
node_text_size = 3,
node_alpha = 0,
edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE) +
theme(legend.position = "bottom")
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == "cell type"
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_size = 3,
node_text_size = 3,
node_alpha = 0,
edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE) +
theme(legend.position = "bottom")
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 3,
node_alpha = 0,
edge_width = 1,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE) +
theme(legend.position = "bottom")
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 3,
node_alpha = 0,
edge_width = 7,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE) +
theme(legend.position = "bottom")
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 3,
node_alpha = 0,
edge_width = 7,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE)
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 10,
node_alpha = 0,
edge_width = 7,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE)
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 7,
node_alpha = 0,
edge_width = 7,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE)
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
g <- clustree(sub,
layout = "sugiyama",
use_core_edges = FALSE,
node_text_size = 5,
node_alpha = 0,
edge_width = 7,
show_axis = TRUE) +
#g <- clustree(sub,
#              layout = "sugiyama",
#              use_core_edges = FALSE,
#              node_size = 3,
#              node_text_size = 3,
#              node_alpha = 0,
#              edge_width = 7) +
scale_edge_alpha(range = c(0.05,0.05)) + # otherwise edges cover everything up
geom_text(aes(x = 0, y = -10, label = "mouse", size = 2)) + # just to make some room so labels aren't cut off
guides(edge_size = FALSE, edge_alpha = FALSE)
# move the single cell layer of nodes down for more space
gedit <- g$data[, "RNA_snn_res."] == 1000
g$data[gedit, "y"] <- -5
# rotate single cell layer texts
g$layers[[3]]$aes_params$angle <- 90
g
library(dplyr)
library(Seurat)
library(patchwork)
library(clustifyr)
library(tidyverse)
library(digest)
library(here)
mat_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_expression_matrix.csv.gz")
mat_PFC <- mat_PFC %>%
#as.data.frame() %>%
column_to_rownames('X1')
#as.matrix() %>%
#t()
mat_PFC[1:5, 1:5]
View(mat_PFC)
meta_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_meta_data.csv.gz")
meta_PFC
View(meta_PFC)
rm(meta_PFC$nGene)
clear
rm(meta_PFC$nGene)
rm(meta_PFC$nUMI)
as.data.frame(meta_PFC)
df <- subset(meta_PFC, select = -c(nGene, nUMI))
df <- subset(meta_PFC, select = -c(nGene, nUMI, Sample, Period, stage))
View(df)
df <- subset(meta_PFC, select = -c(nGene, nUMI, Sample, Period, stage, percent.mito))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", skip = 1, col_names = F)
ids_mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", n_max = 1, col_names = F)
mat_Lung <- mat_Lung %>%
column_to_rownames('X1')
mat_Lung[1:5, 1:5]
colnames(mat_Lung) <- ids_mat_Lung[1,] %>% unlist() %>% as.vector()
meta_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_cell_metadata.tsv.gz")
meta_Lung
sum(colnames(mat_Lung) %in% meta_Lung$cell_type)
ncol(mat_Lung)
source("~/Reference-Matrix-Generation/R/utils/check.r")
install.packages(clustifyr)
install_github(rnabioco/clustifyr)
remotes::install_github("rnabioco/clustifyr")
library(clustifyr)
remotes::install_github("rnabioco/clustifyr")
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", skip = 1, col_names = F)
ids_mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", n_max = 1, col_names = F)
mat_Lung <- mat_Lung %>%
column_to_rownames('X1')
mat_Lung[1:5, 1:5]
colnames(mat_Lung) <- ids_mat_Lung[1,] %>% unlist() %>% as.vector()
meta_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_cell_metadata.tsv.gz")
meta_Lung
sum(colnames(mat_Lung) %in% meta_Lung$cell_type)
ncol(mat_Lung)
checkRawCounts <- clustifyr::
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", skip = 1, col_names = F)
ids_mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", n_max = 1, col_names = F)
mat_Lung <- mat_Lung %>%
column_to_rownames('X1')
mat_Lung[1:5, 1:5]
colnames(mat_Lung) <- ids_mat_Lung[1,] %>% unlist() %>% as.vector()
meta_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_cell_metadata.tsv.gz")
meta_Lung
sum(colnames(mat_Lung) %in% meta_Lung$cell_type)
ncol(mat_Lung)
checkRawCounts <- clustifyr::check_raw_counts()
clustifyr::check_raw_counts(as.matrix(mat_Lung))
GSE113049Normalized <- NormalizeData(mat_Lung)
GSE113049Normalized
GSE113049Ref_Matrix <- average_clusters(mat = GSE113049Normalized, metadata = meta_Lung$cell_type, if_log = FALSE, output_log = FALSE)
#An example of reference matrix generation for GEO record GSE124952
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
library(here)
mat_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_expression_matrix.csv.gz")
#An example of reference matrix generation for GEO record GSE124952
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
library(here)
mat_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_expression_matrix.csv.gz")
mat_PFC <- mat_PFC %>%
column_to_rownames('X1')
meta_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_meta_data.csv.gz")
meta_PFC
clustifyr::check_raw_counts(as.matrix(mat_PFC))
GSE124952Normalized <- NormalizeData(mat_PFC)
GSE124952Normalized
GSE124952Ref_Matrix <- average_clusters(mat = GSE124952Normalized, metadata = meta_PFC$CellType, if_log = FALSE)
library(dplyr)
library(Seurat)
library(clustifyr)
library(clustifyrdata)
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
library(readr)
library(digest)
# path to mouse genes
mouse_genes_fn <- clustifyr::mouse_genes_10x
references_to_combine <- list(GSE113049Ref_Matrix, GSE124952Ref_Matrix)
smallAtlas <- clustifyr::build_atlas(NULL, human_genes_10x, references_to_combine, NULL)
View(smallAtlas)
#An example of reference matrix generation for GEO record GSE113049
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", skip = 1, col_names = F, n_max = 100)
ids_mat_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_count_matrix.tsv.gz", n_max = 1, col_names = F)
mat_Lung <- mat_Lung %>%
column_to_rownames('X1')
colnames(mat_Lung) <- ids_mat_Lung[1,] %>% unlist() %>% as.vector()
meta_Lung <- read_tsv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE113nnn/GSE113049/suppl/GSE113049_cell_metadata.tsv.gz")
sum(colnames(mat_Lung) %in% meta_Lung$cell_type)
ncol(mat_Lung)
clustifyr::check_raw_counts(as.matrix(mat_Lung))
GSE113049Normalized <- NormalizeData(mat_Lung)
GSE113049Ref_Matrix <- average_clusters(mat = GSE113049Normalized, metadata = meta_Lung$cell_type, if_log = FALSE, output_log = FALSE)
View(GSE113049Normalized)
View(GSE113049Ref_Matrix)
#An example of reference matrix generation for GEO record GSE124952
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
library(here)
mat_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_expression_matrix.csv.gz",  n_max = 100)
mat_PFC <- mat_PFC %>%
column_to_rownames('X1')
meta_PFC <- read_csv("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE124nnn/GSE124952/suppl/GSE124952_meta_data.csv.gz")
meta_PFC
clustifyr::check_raw_counts(as.matrix(mat_PFC))
GSE124952Normalized <- NormalizeData(mat_PFC)
GSE124952Ref_Matrix <- average_clusters(mat = GSE124952Normalized, metadata = meta_PFC$CellType, if_log = FALSE)
library(dplyr)
library(Seurat)
library(clustifyr)
library(tidyverse)
library(readr)
# path to mouse genes
mouse_genes_fn <- clustifyr::mouse_genes_10x
references_to_combine <- list(GSE113049Ref_Matrix, GSE124952Ref_Matrix)
smallAtlas <- clustifyr::build_atlas(NULL, human_genes_10x, references_to_combine, NULL)
View(smallAtlas)
pkgdown::build_site()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp()
runApp()
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
load("~/Reference-Matrix-Generation/data/GSE115301/GSE115301_dnMAML1_EV_10x_metadata.txt")
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
library(tools)
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
GSE137710MouseSpleen <- readRDS("~/Reference-Matrix-Generation/ref_matrices/musMusculus/GSE137710MouseCopy/GSE137710MouseSpleen.rds")
View(GSE137710MouseSpleen)
View(GSE137710MouseSpleen)
GSE137710HumanMelanoma <- readRDS("~/Reference-Matrix-Generation/ref_matrices/homoSapiens/GSE137710HumanCopy/GSE137710HumanMelanoma.rds")
humanSpleenRefMatrix <- readRDS("~/Reference-Matrix-Generation/ref_matrices/homoSapiens/GSE137710HumanCopy/humanSpleenRefMatrix.rds")
View(GSE137710HumanMelanoma)
View(GSE137710HumanMelanoma)
View(humanSpleenRefMatrix)
View(humanSpleenRefMatrix)
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
data2()[[input$metadataCellType]]
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
input$metadataCellType
input$metadataCellType
input$metadataCellType
data2()[[input$metadataCellType]]
reference_matrix <- average_clusters(mat = data1(), metadata = data2()[[input$metadataCellType]], if_log = TRUE)
dim(data1())
data1()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
input$metadataCellType
input$metadataCellType
reference_matrix <- average_clusters(mat = data1(), metadata = data2()[[input$metadataCellType]], if_log = TRUE)
shiny::runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
runApp()
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
BiocManager::version()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clustifyrdatahub")
BiocManager::version()
install.packages(BiocManager)
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
clear
runApp('R-Shiny-App-Practice/scRNA-seq-atlas')
clear
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clustifyrdatahub")
shiny::runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clustifyrdatahub")
runApp()
shiny::runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("XVector")
runApp()
shiny::runApp()
clear
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
